
NucleoF303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr.text     00000184  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  20000000  20000000  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  4 .ARM.attributes 00000030  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY
  5 .comment      00000053  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000998  00000000  00000000  00010593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000001ed  00000000  00000000  00010f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000328  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_ranges 000002e8  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_macro  000028be  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001e34  00000000  00000000  00013fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    0000ae4d  00000000  00000000  00015e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000008d0  00000000  00000000  00020c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <LED_ON>:
*
*
*****************************************************************************/
#include "Led.h"

void LED_ON(){
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	LED_CFG_PORT |= (1<<LED_CFG_PIN);
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <LED_ON+0x1c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <LED_ON+0x1c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6013      	str	r3, [r2, #0]
}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	48000014 	.word	0x48000014

080001a4 <LED_OFF>:

void LED_OFF(){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	LED_CFG_PORT &= ~(1<<LED_CFG_PIN);
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <LED_OFF+0x1c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a04      	ldr	r2, [pc, #16]	; (80001c0 <LED_OFF+0x1c>)
 80001ae:	f023 0320 	bic.w	r3, r3, #32
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	48000014 	.word	0x48000014

080001c4 <LED_Init>:

void LED_TOGGLE(){
	LED_CFG_PORT ^= (1<<LED_CFG_PIN);
}

void LED_Init(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	LED_CFG_PORT &= ~(1<<LED_CFG_PIN);
 80001c8:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <LED_Init+0x24>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a06      	ldr	r2, [pc, #24]	; (80001e8 <LED_Init+0x24>)
 80001ce:	f023 0320 	bic.w	r3, r3, #32
 80001d2:	6013      	str	r3, [r2, #0]
	LED_CFG_PORT |= (LED_CFG_INIT_PIN_STATE<<LED_CFG_PIN);
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <LED_Init+0x24>)
 80001d6:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <LED_Init+0x24>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	6013      	str	r3, [r2, #0]

}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	48000014 	.word	0x48000014

080001ec <PORT_Init>:

	}
#endif /* End of #if( PORT_CFG_PORT_UNLOCK_API_ENABLE  == STD_ON ) */


void PORT_Init(){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
		#if(PORT_CFG_PORT_A_ENABLE == STD_ON)
		/* Enable PORT A Clock */
		RCC_REG_AHBENR |= (1<<17);
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <PORT_Init+0x48>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <PORT_Init+0x48>)
 80001f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fa:	6013      	str	r3, [r2, #0]

		/* Configure Port Mode for PORT A */
		PORT_REG_PORT_A_MODER = PORT_CONST_PORT_A_MOD_RESET_VALUE | ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_0_MODE) << PORT_REG_MODER_MODER0_0)
 80001fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <PORT_Init+0x4c>)
 8000202:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_13_MODE) << PORT_REG_MODER_MODER13_0)
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_14_MODE) << PORT_REG_MODER_MODER14_0)
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_15_MODE) << PORT_REG_MODER_MODER15_0);

		/* Configure Port Output Type for PORT A */
		PORT_REG_PORT_A_OTYPER = PORT_REG_OTYPER_RESET_VALUE | ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_0_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER0_0)
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <PORT_Init+0x50>)
 8000206:	2204      	movs	r2, #4
 8000208:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_13_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER13_0)
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_14_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER14_0)
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_15_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER15_0);

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_OSPEEDR = PORT_REG_OSPEEDR_RESET_VALUE | ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_0_SPEED) << PORT_REG_OSPEEDR_OSPEEDR0_0)
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <PORT_Init+0x54>)
 800020c:	2208      	movs	r2, #8
 800020e:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_13_SPEED) << PORT_REG_OSPEEDR_OSPEEDR13_0)
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_14_SPEED) << PORT_REG_OSPEEDR_OSPEEDR14_0)
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_15_SPEED) << PORT_REG_OSPEEDR_OSPEEDR15_0);

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_PUPDR = PORT_REG_PUPDR_PORT_A_RESET_VALUE | ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_0_PULL_TYPE) << PORT_REG_PUPDR_PUPDR0_0)
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <PORT_Init+0x58>)
 8000212:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8000216:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_12_PULL_TYPE) << PORT_REG_PUPDR_PUPDR12_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_13_PULL_TYPE) << PORT_REG_PUPDR_PUPDR13_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_14_PULL_TYPE) << PORT_REG_PUPDR_PUPDR14_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_15_PULL_TYPE) << PORT_REG_PUPDR_PUPDR15_0);

		PORT_REG_PORT_A_LCKR = PORT_REG_LCKR_RESET_VALUE;
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <PORT_Init+0x5c>)
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_AFRL = PORT_REG_AFRL_RESET_VALUE | ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_0_ALT_FUNC) << PORT_REG_AFRL_AFRL0_0)
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <PORT_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_5_ALT_FUNC) << PORT_REG_AFRL_AFRL5_0)
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_6_ALT_FUNC) << PORT_REG_AFRL_AFRL6_0)
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_7_ALT_FUNC) << PORT_REG_AFRL_AFRL7_0);

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_AFRH = PORT_REG_AFRH_RESET_VALUE | ( (PORT_REG_AFRH_BITS_MASK & PORT_CFG_PORT_A_PIN_0_ALT_FUNC) << PORT_REG_AFRH_AFRH0_0)
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <PORT_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]


		#endif /* End of #if(PORT_CFG_PORT_H_ENABLE == STD_ON) */


}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40021014 	.word	0x40021014
 8000238:	a8000400 	.word	0xa8000400
 800023c:	48000004 	.word	0x48000004
 8000240:	48000008 	.word	0x48000008
 8000244:	4800000c 	.word	0x4800000c
 8000248:	4800001c 	.word	0x4800001c
 800024c:	48000020 	.word	0x48000020
 8000250:	48000024 	.word	0x48000024

08000254 <main>:
*****************************************************************************/
#include "STM32F303RET6.h"
#include "Port.h"
#include "Led.h"

int main(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]

	PORT_Init();
 800025e:	f7ff ffc5 	bl	80001ec <PORT_Init>
	LED_Init();
 8000262:	f7ff ffaf 	bl	80001c4 <LED_Init>

	while(1){
		LED_ON();
 8000266:	f7ff ff8d 	bl	8000184 <LED_ON>
		for(i=0; i<= 100000; i++);
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	e002      	b.n	8000276 <main+0x22>
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <main+0x44>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d9f8      	bls.n	8000270 <main+0x1c>
		LED_OFF();
 800027e:	f7ff ff91 	bl	80001a4 <LED_OFF>
		for(i=0; i<= 100000; i++);
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	e002      	b.n	800028e <main+0x3a>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a01      	ldr	r2, [pc, #4]	; (8000298 <main+0x44>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d9f8      	bls.n	8000288 <main+0x34>
		LED_ON();
 8000296:	e7e6      	b.n	8000266 <main+0x12>
 8000298:	000186a0 	.word	0x000186a0

0800029c <RESET_HANDLER>:


/*****************************Function-Definitions****************************/
/* RESET Handler */
void RESET_HANDLER(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	/* Copying .data from Flash to .data in SRAM1*/
	/* Local counter to count number of transferred bytes */
	uint32_t i;
	/* Local variable to hold number of bytes found in data section */
	/* Subtracting start data section address from end data section address after casting them to uint32_t to get size in bytes */
	uint32_t data_size_bytes = (uint32_t)&_edata - (uint32_t)&_sdata; // Extracting data section size
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <RESET_HANDLER+0x6c>)
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <RESET_HANDLER+0x70>)
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	60bb      	str	r3, [r7, #8]
	/* DestinationAddress Local Pointer to point at start data section address after casting it to uint8_t* for 1-byte per transfer operation */
	/* _sdata refers to start address of data at SRAM1 Memory as _sdata is a Virtual Memory Address and data is assigned in SRAM1 */
	uint8_t* DestinationAddress = (uint8_t*) &_sdata;
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <RESET_HANDLER+0x70>)
 80002ac:	613b      	str	r3, [r7, #16]
	/* SourceAddress Local Pointer to point at end text section address after casting it to uint8_t* for 1-byte per transfer operation */
	/* _etext refers to end address of text at FLASH Memory as _etext is a Virtual Memory Address and _etext is assigned in FLASH */
	uint8_t* SourceAddress = (uint8_t*) &_etext;
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <RESET_HANDLER+0x74>)
 80002b0:	60fb      	str	r3, [r7, #12]
	/* For data_size_bytes number of bytes, move data pointed at by SourceAddress to position pointed at by DestinationAddress then increment both addresses */
	for(i=0; i < data_size_bytes; i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00a      	b.n	80002ce <RESET_HANDLER+0x32>
	{
		*DestinationAddress++ = *SourceAddress++;
 80002b8:	68fa      	ldr	r2, [r7, #12]
 80002ba:	1c53      	adds	r3, r2, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	1c59      	adds	r1, r3, #1
 80002c2:	6139      	str	r1, [r7, #16]
 80002c4:	7812      	ldrb	r2, [r2, #0]
 80002c6:	701a      	strb	r2, [r3, #0]
	for(i=0; i < data_size_bytes; i++)
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	3301      	adds	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	697a      	ldr	r2, [r7, #20]
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3f0      	bcc.n	80002b8 <RESET_HANDLER+0x1c>
	}
	
	/* Initializing .bss data in SRAM */
	/* Local variable to hold number of bytes found in bss section */
	/* Subtracting start bss section address from end bss section address after casting them to uint32_t to get size in bytes */
	uint32_t bss_size_bytes = (uint32_t)&_ebss - (uint32_t)&_sbss; // Extracting bss section size
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <RESET_HANDLER+0x78>)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <RESET_HANDLER+0x7c>)
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	607b      	str	r3, [r7, #4]
	/* DestinationAddress Local Pointer to point at start bss section address after casting it to uint8_t* for 1-byte per transfer operation */
	DestinationAddress = (uint8_t*) &_sbss;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <RESET_HANDLER+0x7c>)
 80002e0:	613b      	str	r3, [r7, #16]
	/* No SourceAddress was used as variables stored in bss section are initialized with 0 */
	/* For bss_size_bytes number of bytes, value 0 to position pointed at by DestinationAddress then increment DestinationAddress */
	for(i=0; i < bss_size_bytes; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e007      	b.n	80002f8 <RESET_HANDLER+0x5c>
	{
		*DestinationAddress++ = 0;
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	1c5a      	adds	r2, r3, #1
 80002ec:	613a      	str	r2, [r7, #16]
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
	for(i=0; i < bss_size_bytes; i++)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3f3      	bcc.n	80002e8 <RESET_HANDLER+0x4c>
	}
	
	/* Call Main function */
	main();
 8000300:	f7ff ffa8 	bl	8000254 <main>

	/* In case no Main found loop in while(1) */
	while(1);
 8000304:	e7fe      	b.n	8000304 <RESET_HANDLER+0x68>
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000
 800030c:	20000000 	.word	0x20000000
 8000310:	08000510 	.word	0x08000510
 8000314:	20000000 	.word	0x20000000
 8000318:	20000000 	.word	0x20000000

0800031c <NMI_HANDLER>:
}

/* NMI Handler */
 __attribute__ ((weak)) void NMI_HANDLER(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	while(1);
 8000320:	e7fe      	b.n	8000320 <NMI_HANDLER+0x4>

08000322 <HARDFAULT_HANDLER>:
}

/* HARDFAULT Handler */
 __attribute__ ((weak)) void HARDFAULT_HANDLER(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
	while(1);
 8000326:	e7fe      	b.n	8000326 <HARDFAULT_HANDLER+0x4>

08000328 <MEMMANGE_HANDLER>:
}

/* MEMMANGE Handler */
 __attribute__ ((weak)) void MEMMANGE_HANDLER(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	while(1);
 800032c:	e7fe      	b.n	800032c <MEMMANGE_HANDLER+0x4>

0800032e <BUSFAULT_HANDLER>:
}

/* BUSFAULT Handler */
 __attribute__ ((weak)) void BUSFAULT_HANDLER(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
	while(1);
 8000332:	e7fe      	b.n	8000332 <BUSFAULT_HANDLER+0x4>

08000334 <USAGEFAULT_HANDLER>:
}

/* USAGEFAULT Handler */
 __attribute__ ((weak)) void USAGEFAULT_HANDLER(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	while(1);
 8000338:	e7fe      	b.n	8000338 <USAGEFAULT_HANDLER+0x4>

0800033a <SVCALL_HANDLER>:
}

/* SVCALL Handler */
 __attribute__ ((weak)) void SVCALL_HANDLER(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
	while(1);
 800033e:	e7fe      	b.n	800033e <SVCALL_HANDLER+0x4>

08000340 <PENDSV_HANDLER>:
}

/* PENDSV Handler */
 __attribute__ ((weak)) void PENDSV_HANDLER(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	while(1);
 8000344:	e7fe      	b.n	8000344 <PENDSV_HANDLER+0x4>

08000346 <SYSTICK_HANDLER>:
}

/* SYSTICK Handler */
 __attribute__ ((weak)) void SYSTICK_HANDLER(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
	while(1);
 800034a:	e7fe      	b.n	800034a <SYSTICK_HANDLER+0x4>

0800034c <WWDG_HANDLER>:
}


 __attribute__ ((weak)) void WWDG_HANDLER(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	while(1);
 8000350:	e7fe      	b.n	8000350 <WWDG_HANDLER+0x4>

08000352 <PVD_HANDLER>:
}

 __attribute__ ((weak)) void PVD_HANDLER(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
	while(1);
 8000356:	e7fe      	b.n	8000356 <PVD_HANDLER+0x4>

08000358 <TAMPER_STAMP_HANDLER>:
}			

 __attribute__ ((weak)) void TAMPER_STAMP_HANDLER(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	while(1);
 800035c:	e7fe      	b.n	800035c <TAMPER_STAMP_HANDLER+0x4>

0800035e <RTC_WKUP_HANDLER>:
}

 __attribute__ ((weak)) void RTC_WKUP_HANDLER(void)			
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
	while(1);
 8000362:	e7fe      	b.n	8000362 <RTC_WKUP_HANDLER+0x4>

08000364 <FLASH_HANDLER>:
}

 __attribute__ ((weak)) void FLASH_HANDLER(void)			
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	while(1);
 8000368:	e7fe      	b.n	8000368 <FLASH_HANDLER+0x4>

0800036a <RCC_HANDLER>:
}

 __attribute__ ((weak)) void RCC_HANDLER(void)				
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
	while(1);
 800036e:	e7fe      	b.n	800036e <RCC_HANDLER+0x4>

08000370 <EXTI0_HANDLER>:
}

 __attribute__ ((weak)) void EXTI0_HANDLER(void)			
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	while(1);
 8000374:	e7fe      	b.n	8000374 <EXTI0_HANDLER+0x4>

08000376 <EXTI1_HANDLER>:
}

 __attribute__ ((weak)) void EXTI1_HANDLER(void)			
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
	while(1);
 800037a:	e7fe      	b.n	800037a <EXTI1_HANDLER+0x4>

0800037c <EXTI2_TS_HANDLER>:
}

 __attribute__ ((weak)) void EXTI2_TS_HANDLER(void)			
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	while(1);
 8000380:	e7fe      	b.n	8000380 <EXTI2_TS_HANDLER+0x4>

08000382 <EXTI3_HANDLER>:
}

 __attribute__ ((weak)) void EXTI3_HANDLER(void)			
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
	while(1);
 8000386:	e7fe      	b.n	8000386 <EXTI3_HANDLER+0x4>

08000388 <EXTI4_HANDLER>:
}

 __attribute__ ((weak)) void EXTI4_HANDLER(void)			
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	while(1);
 800038c:	e7fe      	b.n	800038c <EXTI4_HANDLER+0x4>

0800038e <DMA1_CHANNEL1_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL1_HANDLER(void)	
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
	while(1);
 8000392:	e7fe      	b.n	8000392 <DMA1_CHANNEL1_HANDLER+0x4>

08000394 <DMA1_CHANNEL2_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL2_HANDLER(void)	
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	while(1);
 8000398:	e7fe      	b.n	8000398 <DMA1_CHANNEL2_HANDLER+0x4>

0800039a <DMA1_CHANNEL3_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL3_HANDLER(void)	
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
	while(1);
 800039e:	e7fe      	b.n	800039e <DMA1_CHANNEL3_HANDLER+0x4>

080003a0 <DMA1_CHANNEL4_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL4_HANDLER(void)	
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	while(1);
 80003a4:	e7fe      	b.n	80003a4 <DMA1_CHANNEL4_HANDLER+0x4>

080003a6 <DMA1_CHANNEL5_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL5_HANDLER(void)	
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
	while(1);
 80003aa:	e7fe      	b.n	80003aa <DMA1_CHANNEL5_HANDLER+0x4>

080003ac <DMA1_CHANNEL6_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL6_HANDLER(void)	
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	while(1);
 80003b0:	e7fe      	b.n	80003b0 <DMA1_CHANNEL6_HANDLER+0x4>

080003b2 <DMA1_CHANNEL7_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL7_HANDLER(void)	
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
	while(1);
 80003b6:	e7fe      	b.n	80003b6 <DMA1_CHANNEL7_HANDLER+0x4>

080003b8 <ADC1_ADC2_GLOBAL_HANDLER>:
}

 __attribute__ ((weak)) void ADC1_ADC2_GLOBAL_HANDLER(void)	
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	while(1);
 80003bc:	e7fe      	b.n	80003bc <ADC1_ADC2_GLOBAL_HANDLER+0x4>

080003be <USB_HP_CAN_TX_HANDLER>:
}

 __attribute__ ((weak)) void USB_HP_CAN_TX_HANDLER(void)	
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
	while(1);
 80003c2:	e7fe      	b.n	80003c2 <USB_HP_CAN_TX_HANDLER+0x4>

080003c4 <USB_LP_CAN_RX0_HANDLER>:
}

 __attribute__ ((weak)) void USB_LP_CAN_RX0_HANDLER(void)	
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	while(1);
 80003c8:	e7fe      	b.n	80003c8 <USB_LP_CAN_RX0_HANDLER+0x4>

080003ca <CAN_RX1_HANDLER>:
}

 __attribute__ ((weak)) void CAN_RX1_HANDLER(void)			
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0
	while(1);
 80003ce:	e7fe      	b.n	80003ce <CAN_RX1_HANDLER+0x4>

080003d0 <CAN_SCE_HANDLER>:
}

 __attribute__ ((weak)) void CAN_SCE_HANDLER(void)			
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	while(1);
 80003d4:	e7fe      	b.n	80003d4 <CAN_SCE_HANDLER+0x4>

080003d6 <EXTI9_5_HANDLER>:
}

 __attribute__ ((weak)) void EXTI9_5_HANDLER(void)			
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
	while(1);
 80003da:	e7fe      	b.n	80003da <EXTI9_5_HANDLER+0x4>

080003dc <TIM1_BRK_TIM15_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_BRK_TIM15_HANDLER(void)	
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	while(1);
 80003e0:	e7fe      	b.n	80003e0 <TIM1_BRK_TIM15_HANDLER+0x4>

080003e2 <TIM1_UP_TIM16_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_UP_TIM16_HANDLER(void)	
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
	while(1);
 80003e6:	e7fe      	b.n	80003e6 <TIM1_UP_TIM16_HANDLER+0x4>

080003e8 <TIM1_TRG_COM_TIM17_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_TRG_COM_TIM17_HANDLER(void)	
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	while(1);
 80003ec:	e7fe      	b.n	80003ec <TIM1_TRG_COM_TIM17_HANDLER+0x4>

080003ee <TIM1_CC_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_CC_HANDLER(void)			
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
	while(1);
 80003f2:	e7fe      	b.n	80003f2 <TIM1_CC_HANDLER+0x4>

080003f4 <TIM2_HANDLER>:
}

 __attribute__ ((weak)) void TIM2_HANDLER(void)				
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	while(1);
 80003f8:	e7fe      	b.n	80003f8 <TIM2_HANDLER+0x4>

080003fa <TIM3_HANDLER>:
}

 __attribute__ ((weak)) void TIM3_HANDLER(void)				
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
	while(1);
 80003fe:	e7fe      	b.n	80003fe <TIM3_HANDLER+0x4>

08000400 <TIM4_HANDLER>:
}

 __attribute__ ((weak)) void TIM4_HANDLER(void)				
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	while(1);
 8000404:	e7fe      	b.n	8000404 <TIM4_HANDLER+0x4>

08000406 <I2C1_EV_HANDLER>:
}

 __attribute__ ((weak)) void I2C1_EV_HANDLER(void)			
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
	while(1);
 800040a:	e7fe      	b.n	800040a <I2C1_EV_HANDLER+0x4>

0800040c <I2C1_ER_HANDLER>:
}

 __attribute__ ((weak)) void I2C1_ER_HANDLER(void)			
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	while(1);
 8000410:	e7fe      	b.n	8000410 <I2C1_ER_HANDLER+0x4>

08000412 <I2C2_EV_HANDLER>:
}

 __attribute__ ((weak)) void I2C2_EV_HANDLER(void)			
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
	while(1);
 8000416:	e7fe      	b.n	8000416 <I2C2_EV_HANDLER+0x4>

08000418 <I2C2_ER_HANDLER>:
}

 __attribute__ ((weak)) void I2C2_ER_HANDLER(void)			
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	while(1);
 800041c:	e7fe      	b.n	800041c <I2C2_ER_HANDLER+0x4>

0800041e <SPI1_HANDLER>:
}

 __attribute__ ((weak)) void SPI1_HANDLER(void)				
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
	while(1);
 8000422:	e7fe      	b.n	8000422 <SPI1_HANDLER+0x4>

08000424 <SPI2_HANDLER>:
}

 __attribute__ ((weak)) void SPI2_HANDLER(void)				
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	while(1);
 8000428:	e7fe      	b.n	8000428 <SPI2_HANDLER+0x4>

0800042a <USART1_HANDLER>:
}

 __attribute__ ((weak)) void USART1_HANDLER(void)			
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
	while(1);
 800042e:	e7fe      	b.n	800042e <USART1_HANDLER+0x4>

08000430 <USART2_HANDLER>:
}

 __attribute__ ((weak)) void USART2_HANDLER(void)			
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	while(1);
 8000434:	e7fe      	b.n	8000434 <USART2_HANDLER+0x4>

08000436 <USART3_HANDLER>:
}

 __attribute__ ((weak)) void USART3_HANDLER(void)			
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
	while(1);
 800043a:	e7fe      	b.n	800043a <USART3_HANDLER+0x4>

0800043c <EXTI15_10_HANDLER>:
}

 __attribute__ ((weak)) void EXTI15_10_HANDLER(void)		
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	while(1);
 8000440:	e7fe      	b.n	8000440 <EXTI15_10_HANDLER+0x4>

08000442 <RTC_ALARM_HANDLER>:
}

 __attribute__ ((weak)) void RTC_ALARM_HANDLER(void)		
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
	while(1);
 8000446:	e7fe      	b.n	8000446 <RTC_ALARM_HANDLER+0x4>

08000448 <USB_WAKEUP_HANDLER>:
}

 __attribute__ ((weak)) void USB_WAKEUP_HANDLER(void)		
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	while(1);
 800044c:	e7fe      	b.n	800044c <USB_WAKEUP_HANDLER+0x4>

0800044e <TIM8_BRK_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_BRK_HANDLER(void)			
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
	while(1);
 8000452:	e7fe      	b.n	8000452 <TIM8_BRK_HANDLER+0x4>

08000454 <TIM8_UP_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_UP_HANDLER(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	while(1);
 8000458:	e7fe      	b.n	8000458 <TIM8_UP_HANDLER+0x4>

0800045a <TIM8_TRG_COM_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_TRG_COM_HANDLER(void)		
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
	while(1);
 800045e:	e7fe      	b.n	800045e <TIM8_TRG_COM_HANDLER+0x4>

08000460 <TIM8_CC_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_CC_HANDLER(void)			
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	while(1);
 8000464:	e7fe      	b.n	8000464 <TIM8_CC_HANDLER+0x4>

08000466 <ADC3_HANDLER>:
}

 __attribute__ ((weak)) void ADC3_HANDLER(void)				
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
	while(1);
 800046a:	e7fe      	b.n	800046a <ADC3_HANDLER+0x4>

0800046c <FMC_HANDLER>:
}

 __attribute__ ((weak)) void FMC_HANDLER(void)				
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	while(1);
 8000470:	e7fe      	b.n	8000470 <FMC_HANDLER+0x4>

08000472 <SPI3_HANDLER>:
}

 __attribute__ ((weak)) void SPI3_HANDLER(void)				
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
	while(1);
 8000476:	e7fe      	b.n	8000476 <SPI3_HANDLER+0x4>

08000478 <UART4_HANDLER>:
}

 __attribute__ ((weak)) void UART4_HANDLER(void)			
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	while(1);
 800047c:	e7fe      	b.n	800047c <UART4_HANDLER+0x4>

0800047e <UART5_HANDLER>:
}

 __attribute__ ((weak)) void UART5_HANDLER(void)			
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
	while(1);
 8000482:	e7fe      	b.n	8000482 <UART5_HANDLER+0x4>

08000484 <TIM6_DAC_HANDLER>:
}

 __attribute__ ((weak)) void TIM6_DAC_HANDLER(void)			
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	while(1);
 8000488:	e7fe      	b.n	8000488 <TIM6_DAC_HANDLER+0x4>

0800048a <TIM7_HANDLER>:
}

 __attribute__ ((weak)) void TIM7_HANDLER(void)				
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
	while(1);
 800048e:	e7fe      	b.n	800048e <TIM7_HANDLER+0x4>

08000490 <DMA2_CHANNEL1_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL1_HANDLER(void)	
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	while(1);
 8000494:	e7fe      	b.n	8000494 <DMA2_CHANNEL1_HANDLER+0x4>

08000496 <DMA2_CHANNEL2_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL2_HANDLER(void)	
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
	while(1);
 800049a:	e7fe      	b.n	800049a <DMA2_CHANNEL2_HANDLER+0x4>

0800049c <DMA2_CHANNEL3_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL3_HANDLER(void)	
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	while(1);
 80004a0:	e7fe      	b.n	80004a0 <DMA2_CHANNEL3_HANDLER+0x4>

080004a2 <DMA2_CHANNEL4_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL4_HANDLER(void)	
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
	while(1);
 80004a6:	e7fe      	b.n	80004a6 <DMA2_CHANNEL4_HANDLER+0x4>

080004a8 <DMA2_CHANNEL5_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL5_HANDLER(void)	
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	while(1);
 80004ac:	e7fe      	b.n	80004ac <DMA2_CHANNEL5_HANDLER+0x4>

080004ae <ADC4_HANDLER>:
}

 __attribute__ ((weak)) void ADC4_HANDLER(void)				
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
	while(1);
 80004b2:	e7fe      	b.n	80004b2 <ADC4_HANDLER+0x4>

080004b4 <COMP1_COMP2_COMP3_HANDLER>:
}

 __attribute__ ((weak)) void COMP1_COMP2_COMP3_HANDLER(void)		
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	while(1);
 80004b8:	e7fe      	b.n	80004b8 <COMP1_COMP2_COMP3_HANDLER+0x4>

080004ba <COMP4_COMP5_COMP6_HANDLER>:
}

 __attribute__ ((weak)) void COMP4_COMP5_COMP6_HANDLER(void)		
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
	while(1);
 80004be:	e7fe      	b.n	80004be <COMP4_COMP5_COMP6_HANDLER+0x4>

080004c0 <COMP7_HANDLER>:
}

 __attribute__ ((weak)) void COMP7_HANDLER(void)			
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	while(1);
 80004c4:	e7fe      	b.n	80004c4 <COMP7_HANDLER+0x4>

080004c6 <I2C3_EV_HANDLER>:
}

 __attribute__ ((weak)) void I2C3_EV_HANDLER(void)			
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
	while(1);
 80004ca:	e7fe      	b.n	80004ca <I2C3_EV_HANDLER+0x4>

080004cc <I2C3_ER_HANDLER>:
}

 __attribute__ ((weak)) void I2C3_ER_HANDLER(void)			
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	while(1);
 80004d0:	e7fe      	b.n	80004d0 <I2C3_ER_HANDLER+0x4>

080004d2 <USB_HP_HANDLER>:
}

 __attribute__ ((weak)) void USB_HP_HANDLER(void)			
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
	while(1);
 80004d6:	e7fe      	b.n	80004d6 <USB_HP_HANDLER+0x4>

080004d8 <USB_HL_HANDLER>:
}

 __attribute__ ((weak)) void USB_HL_HANDLER(void)			
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	while(1);
 80004dc:	e7fe      	b.n	80004dc <USB_HL_HANDLER+0x4>

080004de <USB_WAKEUP_RMP_HANDLER>:
}

 __attribute__ ((weak)) void USB_WAKEUP_RMP_HANDLER(void)	
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
	while(1);
 80004e2:	e7fe      	b.n	80004e2 <USB_WAKEUP_RMP_HANDLER+0x4>

080004e4 <TIM20_BRK_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_BRK_HANDLER(void)		
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	while(1);
 80004e8:	e7fe      	b.n	80004e8 <TIM20_BRK_HANDLER+0x4>

080004ea <TIM20_UP_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_UP_HANDLER(void)			
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
	while(1);
 80004ee:	e7fe      	b.n	80004ee <TIM20_UP_HANDLER+0x4>

080004f0 <TIM20_TRG_COM_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_TRG_COM_HANDLER(void)	
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	while(1);
 80004f4:	e7fe      	b.n	80004f4 <TIM20_TRG_COM_HANDLER+0x4>

080004f6 <TIM20_CC_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_CC_HANDLER(void)			
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
	while(1);
 80004fa:	e7fe      	b.n	80004fa <TIM20_CC_HANDLER+0x4>

080004fc <FPU_HANDLER>:
}

 __attribute__ ((weak)) void FPU_HANDLER(void)				
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	while(1);
 8000500:	e7fe      	b.n	8000500 <FPU_HANDLER+0x4>

08000502 <SPI4_HANDLER>:
}

 __attribute__ ((weak)) void SPI4_HANDLER(void)				
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
	while(1);
 8000506:	e7fe      	b.n	8000506 <SPI4_HANDLER+0x4>

08000508 <_init>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
