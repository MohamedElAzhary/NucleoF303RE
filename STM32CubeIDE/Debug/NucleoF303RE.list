
NucleoF303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr.text     00000184  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  20000000  20000000  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  4 .ARM.attributes 00000030  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY
  5 .comment      00000053  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000a51  00000000  00000000  000105d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000250  00000000  00000000  00011024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000350  00000000  00000000  00011274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_ranges 00000300  00000000  00000000  000115c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_macro  00002559  00000000  00000000  000118c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00002385  00000000  00000000  00013e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    0000bfe0  00000000  00000000  000161a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  0000092c  00000000  00000000  00022184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <BUTTON_PullDown_IsPushed>:
		local_buttonState = true;
	}
	return local_buttonState;
}

bool BUTTON_PullDown_IsPushed(){
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
	bool local_buttonState = false;
 800018a:	2300      	movs	r3, #0
 800018c:	71fb      	strb	r3, [r7, #7]
	if(!(BUTTON_CFG_PORT & (1<<BUTTON_CFG_PIN) )){
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <BUTTON_PullDown_IsPushed+0x28>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000196:	2b00      	cmp	r3, #0
 8000198:	d101      	bne.n	800019e <BUTTON_PullDown_IsPushed+0x1a>
		local_buttonState = true;
 800019a:	2301      	movs	r3, #1
 800019c:	71fb      	strb	r3, [r7, #7]
	}
	return local_buttonState;
 800019e:	79fb      	ldrb	r3, [r7, #7]
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001aa:	4770      	bx	lr
 80001ac:	48000810 	.word	0x48000810

080001b0 <LED_TOGGLE>:

void LED_OFF(){
	LED_CFG_PORT &= ~(1<<LED_CFG_PIN);
}

void LED_TOGGLE(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	LED_CFG_PORT ^= (1<<LED_CFG_PIN);
 80001b4:	4b05      	ldr	r3, [pc, #20]	; (80001cc <LED_TOGGLE+0x1c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a04      	ldr	r2, [pc, #16]	; (80001cc <LED_TOGGLE+0x1c>)
 80001ba:	f083 0320 	eor.w	r3, r3, #32
 80001be:	6013      	str	r3, [r2, #0]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	48000014 	.word	0x48000014

080001d0 <LED_Init>:

void LED_Init(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	LED_CFG_PORT &= ~(1<<LED_CFG_PIN);
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <LED_Init+0x24>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <LED_Init+0x24>)
 80001da:	f023 0320 	bic.w	r3, r3, #32
 80001de:	6013      	str	r3, [r2, #0]
	LED_CFG_PORT |= (LED_CFG_INIT_PIN_STATE<<LED_CFG_PIN);
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <LED_Init+0x24>)
 80001e2:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <LED_Init+0x24>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	6013      	str	r3, [r2, #0]

}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	48000014 	.word	0x48000014

080001f8 <PORT_Init>:

	}
#endif /* End of #if( PORT_CFG_PORT_UNLOCK_API_ENABLE  == STD_ON ) */


void PORT_Init(){
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
		#if(PORT_CFG_PORT_A_ENABLE == STD_ON)
		/* Enable PORT A Clock */
		RCC_REG_AHBENR |= (RCC_CONST_CLOCK_ENABLED<<RCC_REG_AHBENR_IOPAEN);
 80001fc:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <PORT_Init+0x80>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <PORT_Init+0x80>)
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000206:	6013      	str	r3, [r2, #0]

		/* Configure Port Mode for PORT A */
		PORT_REG_PORT_A_MODER = PORT_CONST_PORT_A_MOD_RESET_VALUE | ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_0_MODE) << PORT_REG_MODER_MODER0_0)
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <PORT_Init+0x84>)
 800020e:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_13_MODE) << PORT_REG_MODER_MODER13_0)
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_14_MODE) << PORT_REG_MODER_MODER14_0)
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_A_PIN_15_MODE) << PORT_REG_MODER_MODER15_0);

		/* Configure Port Output Type for PORT A */
		PORT_REG_PORT_A_OTYPER = PORT_REG_OTYPER_RESET_VALUE | ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_0_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER0_0)
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <PORT_Init+0x88>)
 8000212:	2204      	movs	r2, #4
 8000214:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_13_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER13_0)
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_14_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER14_0)
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_A_PIN_15_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER15_0);

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_OSPEEDR = PORT_REG_OSPEEDR_RESET_VALUE | ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_0_SPEED) << PORT_REG_OSPEEDR_OSPEEDR0_0)
 8000216:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <PORT_Init+0x8c>)
 8000218:	2208      	movs	r2, #8
 800021a:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_13_SPEED) << PORT_REG_OSPEEDR_OSPEEDR13_0)
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_14_SPEED) << PORT_REG_OSPEEDR_OSPEEDR14_0)
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_A_PIN_15_SPEED) << PORT_REG_OSPEEDR_OSPEEDR15_0);

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_PUPDR = PORT_REG_PUPDR_PORT_A_RESET_VALUE | ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_0_PULL_TYPE) << PORT_REG_PUPDR_PUPDR0_0)
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <PORT_Init+0x90>)
 800021e:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8000222:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_12_PULL_TYPE) << PORT_REG_PUPDR_PUPDR12_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_13_PULL_TYPE) << PORT_REG_PUPDR_PUPDR13_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_14_PULL_TYPE) << PORT_REG_PUPDR_PUPDR14_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_A_PIN_15_PULL_TYPE) << PORT_REG_PUPDR_PUPDR15_0);

		PORT_REG_PORT_A_LCKR = PORT_REG_LCKR_RESET_VALUE;
 8000224:	4b19      	ldr	r3, [pc, #100]	; (800028c <PORT_Init+0x94>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_AFRL = PORT_REG_AFRL_RESET_VALUE | ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_0_ALT_FUNC) << PORT_REG_AFRL_AFRL0_0)
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <PORT_Init+0x98>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_5_ALT_FUNC) << PORT_REG_AFRL_AFRL5_0)
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_6_ALT_FUNC) << PORT_REG_AFRL_AFRL6_0)
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_A_PIN_7_ALT_FUNC) << PORT_REG_AFRL_AFRL7_0);

		/* Configure Port Output Speed for PORT A */
		PORT_REG_PORT_A_AFRH = PORT_REG_AFRH_RESET_VALUE | ( (PORT_REG_AFRH_BITS_MASK & PORT_CFG_PORT_A_PIN_0_ALT_FUNC) << PORT_REG_AFRH_AFRH0_0)
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <PORT_Init+0x9c>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
		#endif /* End of #if(PORT_CFG_PORT_B_ENABLE == STD_ON) */


		#if(PORT_CFG_PORT_C_ENABLE == STD_ON)
		/* Enable PORT C Clock */
		RCC_REG_AHBENR |= (RCC_CONST_CLOCK_ENABLED<<RCC_REG_AHBENR_IOPCEN);
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <PORT_Init+0x80>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <PORT_Init+0x80>)
 800023c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000240:	6013      	str	r3, [r2, #0]

		/* Configure Port Mode for PORT_C */
		PORT_REG_PORT_C_MODER = PORT_CONST_PORT_C_MOD_RESET_VALUE | ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_C_PIN_0_MODE) << PORT_REG_MODER_MODER0_0)
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <PORT_Init+0xa0>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_C_PIN_13_MODE) << PORT_REG_MODER_MODER13_0)
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_C_PIN_14_MODE) << PORT_REG_MODER_MODER14_0)
											| ( (PORT_REG_MODER_BITS_MASK & PORT_CFG_PORT_C_PIN_15_MODE) << PORT_REG_MODER_MODER15_0);

		/* Configure Port Output Type for PORT_C */
		PORT_REG_PORT_C_OTYPER = PORT_REG_OTYPER_RESET_VALUE | ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_C_PIN_0_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER0_0)
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <PORT_Init+0xa4>)
 800024a:	2204      	movs	r2, #4
 800024c:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_C_PIN_13_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER13_0)
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_C_PIN_14_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER14_0)
											| ( (PORT_REG_OTYPER_BITS_MASK & PORT_CFG_PORT_C_PIN_15_OUTPUT_TYPE) << PORT_REG_OTYPER_OTYPER15_0);

		/* Configure Port Output Speed for PORT_C */
		PORT_REG_PORT_C_OSPEEDR = PORT_REG_OSPEEDR_RESET_VALUE | ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_C_PIN_0_SPEED) << PORT_REG_OSPEEDR_OSPEEDR0_0)
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <PORT_Init+0xa8>)
 8000250:	2208      	movs	r2, #8
 8000252:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_C_PIN_13_SPEED) << PORT_REG_OSPEEDR_OSPEEDR13_0)
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_C_PIN_14_SPEED) << PORT_REG_OSPEEDR_OSPEEDR14_0)
											| ( (PORT_REG_OSPEEDR_BITS_MASK & PORT_CFG_PORT_C_PIN_15_SPEED) << PORT_REG_OSPEEDR_OSPEEDR15_0);

		/* Configure Port Output Speed for PORT_C */
		PORT_REG_PORT_C_PUPDR = PORT_REG_PUPDR_PORT_C_RESET_VALUE | ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_C_PIN_0_PULL_TYPE) << PORT_REG_PUPDR_PUPDR0_0)
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <PORT_Init+0xac>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_C_PIN_12_PULL_TYPE) << PORT_REG_PUPDR_PUPDR12_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_C_PIN_13_PULL_TYPE) << PORT_REG_PUPDR_PUPDR13_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_C_PIN_14_PULL_TYPE) << PORT_REG_PUPDR_PUPDR14_0)
											| ( (PORT_REG_PUPDR_BITS_MASK & PORT_CFG_PORT_C_PIN_15_PULL_TYPE) << PORT_REG_PUPDR_PUPDR15_0);

		PORT_REG_PORT_C_LCKR = PORT_REG_LCKR_RESET_VALUE;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <PORT_Init+0xb0>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]

		/* Configure Port Output Speed for PORT_C */
		PORT_REG_PORT_C_AFRL = PORT_REG_AFRL_RESET_VALUE | ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_C_PIN_0_ALT_FUNC) << PORT_REG_AFRL_AFRL0_0)
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <PORT_Init+0xb4>)
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_C_PIN_5_ALT_FUNC) << PORT_REG_AFRL_AFRL5_0)
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_C_PIN_6_ALT_FUNC) << PORT_REG_AFRL_AFRL6_0)
											| ( (PORT_REG_AFRL_BITS_MASK & PORT_CFG_PORT_C_PIN_7_ALT_FUNC) << PORT_REG_AFRL_AFRL7_0);

		/* Configure Port Output Speed for PORT_C */
		PORT_REG_PORT_C_AFRH = PORT_REG_AFRH_RESET_VALUE | ( (PORT_REG_AFRH_BITS_MASK & PORT_CFG_PORT_C_PIN_0_ALT_FUNC) << PORT_REG_AFRH_AFRH0_0)
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <PORT_Init+0xb8>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]


		#endif /* End of #if(PORT_CFG_PORT_H_ENABLE == STD_ON) */


}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021014 	.word	0x40021014
 800027c:	a8000400 	.word	0xa8000400
 8000280:	48000004 	.word	0x48000004
 8000284:	48000008 	.word	0x48000008
 8000288:	4800000c 	.word	0x4800000c
 800028c:	4800001c 	.word	0x4800001c
 8000290:	48000020 	.word	0x48000020
 8000294:	48000024 	.word	0x48000024
 8000298:	48000800 	.word	0x48000800
 800029c:	48000804 	.word	0x48000804
 80002a0:	48000808 	.word	0x48000808
 80002a4:	4800080c 	.word	0x4800080c
 80002a8:	4800081c 	.word	0x4800081c
 80002ac:	48000820 	.word	0x48000820
 80002b0:	48000824 	.word	0x48000824

080002b4 <main>:
#include "STM32F303RET6.h"
#include "Port.h"
#include "Led.h"
#include "Button.h"

int main(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	//uint32_t i = 0;

	PORT_Init();
 80002b8:	f7ff ff9e 	bl	80001f8 <PORT_Init>
	LED_Init();
 80002bc:	f7ff ff88 	bl	80001d0 <LED_Init>

	while(1){
		if(BUTTON_PullDown_IsPushed()){
 80002c0:	f7ff ff60 	bl	8000184 <BUTTON_PullDown_IsPushed>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0fa      	beq.n	80002c0 <main+0xc>
			while(BUTTON_PullDown_IsPushed());
 80002ca:	bf00      	nop
 80002cc:	f7ff ff5a 	bl	8000184 <BUTTON_PullDown_IsPushed>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1fa      	bne.n	80002cc <main+0x18>
			LED_TOGGLE();
 80002d6:	f7ff ff6b 	bl	80001b0 <LED_TOGGLE>
		if(BUTTON_PullDown_IsPushed()){
 80002da:	e7f1      	b.n	80002c0 <main+0xc>

080002dc <RESET_HANDLER>:


/*****************************Function-Definitions****************************/
/* RESET Handler */
void RESET_HANDLER(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
	/* Copying .data from Flash to .data in SRAM1*/
	/* Local counter to count number of transferred bytes */
	uint32_t i;
	/* Local variable to hold number of bytes found in data section */
	/* Subtracting start data section address from end data section address after casting them to uint32_t to get size in bytes */
	uint32_t data_size_bytes = (uint32_t)&_edata - (uint32_t)&_sdata; // Extracting data section size
 80002e2:	4a19      	ldr	r2, [pc, #100]	; (8000348 <RESET_HANDLER+0x6c>)
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <RESET_HANDLER+0x70>)
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	60bb      	str	r3, [r7, #8]
	/* DestinationAddress Local Pointer to point at start data section address after casting it to uint8_t* for 1-byte per transfer operation */
	/* _sdata refers to start address of data at SRAM1 Memory as _sdata is a Virtual Memory Address and data is assigned in SRAM1 */
	uint8_t* DestinationAddress = (uint8_t*) &_sdata;
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <RESET_HANDLER+0x70>)
 80002ec:	613b      	str	r3, [r7, #16]
	/* SourceAddress Local Pointer to point at end text section address after casting it to uint8_t* for 1-byte per transfer operation */
	/* _etext refers to end address of text at FLASH Memory as _etext is a Virtual Memory Address and _etext is assigned in FLASH */
	uint8_t* SourceAddress = (uint8_t*) &_etext;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <RESET_HANDLER+0x74>)
 80002f0:	60fb      	str	r3, [r7, #12]
	/* For data_size_bytes number of bytes, move data pointed at by SourceAddress to position pointed at by DestinationAddress then increment both addresses */
	for(i=0; i < data_size_bytes; i++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	e00a      	b.n	800030e <RESET_HANDLER+0x32>
	{
		*DestinationAddress++ = *SourceAddress++;
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	1c53      	adds	r3, r2, #1
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	1c59      	adds	r1, r3, #1
 8000302:	6139      	str	r1, [r7, #16]
 8000304:	7812      	ldrb	r2, [r2, #0]
 8000306:	701a      	strb	r2, [r3, #0]
	for(i=0; i < data_size_bytes; i++)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	3301      	adds	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	429a      	cmp	r2, r3
 8000314:	d3f0      	bcc.n	80002f8 <RESET_HANDLER+0x1c>
	}
	
	/* Initializing .bss data in SRAM */
	/* Local variable to hold number of bytes found in bss section */
	/* Subtracting start bss section address from end bss section address after casting them to uint32_t to get size in bytes */
	uint32_t bss_size_bytes = (uint32_t)&_ebss - (uint32_t)&_sbss; // Extracting bss section size
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <RESET_HANDLER+0x78>)
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <RESET_HANDLER+0x7c>)
 800031a:	1ad3      	subs	r3, r2, r3
 800031c:	607b      	str	r3, [r7, #4]
	/* DestinationAddress Local Pointer to point at start bss section address after casting it to uint8_t* for 1-byte per transfer operation */
	DestinationAddress = (uint8_t*) &_sbss;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <RESET_HANDLER+0x7c>)
 8000320:	613b      	str	r3, [r7, #16]
	/* No SourceAddress was used as variables stored in bss section are initialized with 0 */
	/* For bss_size_bytes number of bytes, value 0 to position pointed at by DestinationAddress then increment DestinationAddress */
	for(i=0; i < bss_size_bytes; i++)
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	e007      	b.n	8000338 <RESET_HANDLER+0x5c>
	{
		*DestinationAddress++ = 0;
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	1c5a      	adds	r2, r3, #1
 800032c:	613a      	str	r2, [r7, #16]
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
	for(i=0; i < bss_size_bytes; i++)
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	3301      	adds	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	d3f3      	bcc.n	8000328 <RESET_HANDLER+0x4c>
	}
	
	/* Call Main function */
	main();
 8000340:	f7ff ffb8 	bl	80002b4 <main>

	/* In case no Main found loop in while(1) */
	while(1);
 8000344:	e7fe      	b.n	8000344 <RESET_HANDLER+0x68>
 8000346:	bf00      	nop
 8000348:	20000000 	.word	0x20000000
 800034c:	20000000 	.word	0x20000000
 8000350:	08000550 	.word	0x08000550
 8000354:	20000000 	.word	0x20000000
 8000358:	20000000 	.word	0x20000000

0800035c <NMI_HANDLER>:
}

/* NMI Handler */
 __attribute__ ((weak)) void NMI_HANDLER(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	while(1);
 8000360:	e7fe      	b.n	8000360 <NMI_HANDLER+0x4>

08000362 <HARDFAULT_HANDLER>:
}

/* HARDFAULT Handler */
 __attribute__ ((weak)) void HARDFAULT_HANDLER(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
	while(1);
 8000366:	e7fe      	b.n	8000366 <HARDFAULT_HANDLER+0x4>

08000368 <MEMMANGE_HANDLER>:
}

/* MEMMANGE Handler */
 __attribute__ ((weak)) void MEMMANGE_HANDLER(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	while(1);
 800036c:	e7fe      	b.n	800036c <MEMMANGE_HANDLER+0x4>

0800036e <BUSFAULT_HANDLER>:
}

/* BUSFAULT Handler */
 __attribute__ ((weak)) void BUSFAULT_HANDLER(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
	while(1);
 8000372:	e7fe      	b.n	8000372 <BUSFAULT_HANDLER+0x4>

08000374 <USAGEFAULT_HANDLER>:
}

/* USAGEFAULT Handler */
 __attribute__ ((weak)) void USAGEFAULT_HANDLER(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	while(1);
 8000378:	e7fe      	b.n	8000378 <USAGEFAULT_HANDLER+0x4>

0800037a <SVCALL_HANDLER>:
}

/* SVCALL Handler */
 __attribute__ ((weak)) void SVCALL_HANDLER(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
	while(1);
 800037e:	e7fe      	b.n	800037e <SVCALL_HANDLER+0x4>

08000380 <PENDSV_HANDLER>:
}

/* PENDSV Handler */
 __attribute__ ((weak)) void PENDSV_HANDLER(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	while(1);
 8000384:	e7fe      	b.n	8000384 <PENDSV_HANDLER+0x4>

08000386 <SYSTICK_HANDLER>:
}

/* SYSTICK Handler */
 __attribute__ ((weak)) void SYSTICK_HANDLER(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
	while(1);
 800038a:	e7fe      	b.n	800038a <SYSTICK_HANDLER+0x4>

0800038c <WWDG_HANDLER>:
}


 __attribute__ ((weak)) void WWDG_HANDLER(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	while(1);
 8000390:	e7fe      	b.n	8000390 <WWDG_HANDLER+0x4>

08000392 <PVD_HANDLER>:
}

 __attribute__ ((weak)) void PVD_HANDLER(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
	while(1);
 8000396:	e7fe      	b.n	8000396 <PVD_HANDLER+0x4>

08000398 <TAMPER_STAMP_HANDLER>:
}			

 __attribute__ ((weak)) void TAMPER_STAMP_HANDLER(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	while(1);
 800039c:	e7fe      	b.n	800039c <TAMPER_STAMP_HANDLER+0x4>

0800039e <RTC_WKUP_HANDLER>:
}

 __attribute__ ((weak)) void RTC_WKUP_HANDLER(void)			
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
	while(1);
 80003a2:	e7fe      	b.n	80003a2 <RTC_WKUP_HANDLER+0x4>

080003a4 <FLASH_HANDLER>:
}

 __attribute__ ((weak)) void FLASH_HANDLER(void)			
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	while(1);
 80003a8:	e7fe      	b.n	80003a8 <FLASH_HANDLER+0x4>

080003aa <RCC_HANDLER>:
}

 __attribute__ ((weak)) void RCC_HANDLER(void)				
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
	while(1);
 80003ae:	e7fe      	b.n	80003ae <RCC_HANDLER+0x4>

080003b0 <EXTI0_HANDLER>:
}

 __attribute__ ((weak)) void EXTI0_HANDLER(void)			
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	while(1);
 80003b4:	e7fe      	b.n	80003b4 <EXTI0_HANDLER+0x4>

080003b6 <EXTI1_HANDLER>:
}

 __attribute__ ((weak)) void EXTI1_HANDLER(void)			
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
	while(1);
 80003ba:	e7fe      	b.n	80003ba <EXTI1_HANDLER+0x4>

080003bc <EXTI2_TS_HANDLER>:
}

 __attribute__ ((weak)) void EXTI2_TS_HANDLER(void)			
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	while(1);
 80003c0:	e7fe      	b.n	80003c0 <EXTI2_TS_HANDLER+0x4>

080003c2 <EXTI3_HANDLER>:
}

 __attribute__ ((weak)) void EXTI3_HANDLER(void)			
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
	while(1);
 80003c6:	e7fe      	b.n	80003c6 <EXTI3_HANDLER+0x4>

080003c8 <EXTI4_HANDLER>:
}

 __attribute__ ((weak)) void EXTI4_HANDLER(void)			
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	while(1);
 80003cc:	e7fe      	b.n	80003cc <EXTI4_HANDLER+0x4>

080003ce <DMA1_CHANNEL1_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL1_HANDLER(void)	
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
	while(1);
 80003d2:	e7fe      	b.n	80003d2 <DMA1_CHANNEL1_HANDLER+0x4>

080003d4 <DMA1_CHANNEL2_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL2_HANDLER(void)	
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	while(1);
 80003d8:	e7fe      	b.n	80003d8 <DMA1_CHANNEL2_HANDLER+0x4>

080003da <DMA1_CHANNEL3_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL3_HANDLER(void)	
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
	while(1);
 80003de:	e7fe      	b.n	80003de <DMA1_CHANNEL3_HANDLER+0x4>

080003e0 <DMA1_CHANNEL4_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL4_HANDLER(void)	
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	while(1);
 80003e4:	e7fe      	b.n	80003e4 <DMA1_CHANNEL4_HANDLER+0x4>

080003e6 <DMA1_CHANNEL5_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL5_HANDLER(void)	
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
	while(1);
 80003ea:	e7fe      	b.n	80003ea <DMA1_CHANNEL5_HANDLER+0x4>

080003ec <DMA1_CHANNEL6_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL6_HANDLER(void)	
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	while(1);
 80003f0:	e7fe      	b.n	80003f0 <DMA1_CHANNEL6_HANDLER+0x4>

080003f2 <DMA1_CHANNEL7_HANDLER>:
}

 __attribute__ ((weak)) void DMA1_CHANNEL7_HANDLER(void)	
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
	while(1);
 80003f6:	e7fe      	b.n	80003f6 <DMA1_CHANNEL7_HANDLER+0x4>

080003f8 <ADC1_ADC2_GLOBAL_HANDLER>:
}

 __attribute__ ((weak)) void ADC1_ADC2_GLOBAL_HANDLER(void)	
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	while(1);
 80003fc:	e7fe      	b.n	80003fc <ADC1_ADC2_GLOBAL_HANDLER+0x4>

080003fe <USB_HP_CAN_TX_HANDLER>:
}

 __attribute__ ((weak)) void USB_HP_CAN_TX_HANDLER(void)	
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
	while(1);
 8000402:	e7fe      	b.n	8000402 <USB_HP_CAN_TX_HANDLER+0x4>

08000404 <USB_LP_CAN_RX0_HANDLER>:
}

 __attribute__ ((weak)) void USB_LP_CAN_RX0_HANDLER(void)	
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	while(1);
 8000408:	e7fe      	b.n	8000408 <USB_LP_CAN_RX0_HANDLER+0x4>

0800040a <CAN_RX1_HANDLER>:
}

 __attribute__ ((weak)) void CAN_RX1_HANDLER(void)			
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
	while(1);
 800040e:	e7fe      	b.n	800040e <CAN_RX1_HANDLER+0x4>

08000410 <CAN_SCE_HANDLER>:
}

 __attribute__ ((weak)) void CAN_SCE_HANDLER(void)			
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	while(1);
 8000414:	e7fe      	b.n	8000414 <CAN_SCE_HANDLER+0x4>

08000416 <EXTI9_5_HANDLER>:
}

 __attribute__ ((weak)) void EXTI9_5_HANDLER(void)			
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
	while(1);
 800041a:	e7fe      	b.n	800041a <EXTI9_5_HANDLER+0x4>

0800041c <TIM1_BRK_TIM15_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_BRK_TIM15_HANDLER(void)	
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	while(1);
 8000420:	e7fe      	b.n	8000420 <TIM1_BRK_TIM15_HANDLER+0x4>

08000422 <TIM1_UP_TIM16_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_UP_TIM16_HANDLER(void)	
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
	while(1);
 8000426:	e7fe      	b.n	8000426 <TIM1_UP_TIM16_HANDLER+0x4>

08000428 <TIM1_TRG_COM_TIM17_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_TRG_COM_TIM17_HANDLER(void)	
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	while(1);
 800042c:	e7fe      	b.n	800042c <TIM1_TRG_COM_TIM17_HANDLER+0x4>

0800042e <TIM1_CC_HANDLER>:
}

 __attribute__ ((weak)) void TIM1_CC_HANDLER(void)			
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
	while(1);
 8000432:	e7fe      	b.n	8000432 <TIM1_CC_HANDLER+0x4>

08000434 <TIM2_HANDLER>:
}

 __attribute__ ((weak)) void TIM2_HANDLER(void)				
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	while(1);
 8000438:	e7fe      	b.n	8000438 <TIM2_HANDLER+0x4>

0800043a <TIM3_HANDLER>:
}

 __attribute__ ((weak)) void TIM3_HANDLER(void)				
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
	while(1);
 800043e:	e7fe      	b.n	800043e <TIM3_HANDLER+0x4>

08000440 <TIM4_HANDLER>:
}

 __attribute__ ((weak)) void TIM4_HANDLER(void)				
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	while(1);
 8000444:	e7fe      	b.n	8000444 <TIM4_HANDLER+0x4>

08000446 <I2C1_EV_HANDLER>:
}

 __attribute__ ((weak)) void I2C1_EV_HANDLER(void)			
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
	while(1);
 800044a:	e7fe      	b.n	800044a <I2C1_EV_HANDLER+0x4>

0800044c <I2C1_ER_HANDLER>:
}

 __attribute__ ((weak)) void I2C1_ER_HANDLER(void)			
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	while(1);
 8000450:	e7fe      	b.n	8000450 <I2C1_ER_HANDLER+0x4>

08000452 <I2C2_EV_HANDLER>:
}

 __attribute__ ((weak)) void I2C2_EV_HANDLER(void)			
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
	while(1);
 8000456:	e7fe      	b.n	8000456 <I2C2_EV_HANDLER+0x4>

08000458 <I2C2_ER_HANDLER>:
}

 __attribute__ ((weak)) void I2C2_ER_HANDLER(void)			
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	while(1);
 800045c:	e7fe      	b.n	800045c <I2C2_ER_HANDLER+0x4>

0800045e <SPI1_HANDLER>:
}

 __attribute__ ((weak)) void SPI1_HANDLER(void)				
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
	while(1);
 8000462:	e7fe      	b.n	8000462 <SPI1_HANDLER+0x4>

08000464 <SPI2_HANDLER>:
}

 __attribute__ ((weak)) void SPI2_HANDLER(void)				
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	while(1);
 8000468:	e7fe      	b.n	8000468 <SPI2_HANDLER+0x4>

0800046a <USART1_HANDLER>:
}

 __attribute__ ((weak)) void USART1_HANDLER(void)			
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
	while(1);
 800046e:	e7fe      	b.n	800046e <USART1_HANDLER+0x4>

08000470 <USART2_HANDLER>:
}

 __attribute__ ((weak)) void USART2_HANDLER(void)			
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	while(1);
 8000474:	e7fe      	b.n	8000474 <USART2_HANDLER+0x4>

08000476 <USART3_HANDLER>:
}

 __attribute__ ((weak)) void USART3_HANDLER(void)			
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
	while(1);
 800047a:	e7fe      	b.n	800047a <USART3_HANDLER+0x4>

0800047c <EXTI15_10_HANDLER>:
}

 __attribute__ ((weak)) void EXTI15_10_HANDLER(void)		
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	while(1);
 8000480:	e7fe      	b.n	8000480 <EXTI15_10_HANDLER+0x4>

08000482 <RTC_ALARM_HANDLER>:
}

 __attribute__ ((weak)) void RTC_ALARM_HANDLER(void)		
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
	while(1);
 8000486:	e7fe      	b.n	8000486 <RTC_ALARM_HANDLER+0x4>

08000488 <USB_WAKEUP_HANDLER>:
}

 __attribute__ ((weak)) void USB_WAKEUP_HANDLER(void)		
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	while(1);
 800048c:	e7fe      	b.n	800048c <USB_WAKEUP_HANDLER+0x4>

0800048e <TIM8_BRK_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_BRK_HANDLER(void)			
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
	while(1);
 8000492:	e7fe      	b.n	8000492 <TIM8_BRK_HANDLER+0x4>

08000494 <TIM8_UP_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_UP_HANDLER(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	while(1);
 8000498:	e7fe      	b.n	8000498 <TIM8_UP_HANDLER+0x4>

0800049a <TIM8_TRG_COM_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_TRG_COM_HANDLER(void)		
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
	while(1);
 800049e:	e7fe      	b.n	800049e <TIM8_TRG_COM_HANDLER+0x4>

080004a0 <TIM8_CC_HANDLER>:
}

 __attribute__ ((weak)) void TIM8_CC_HANDLER(void)			
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	while(1);
 80004a4:	e7fe      	b.n	80004a4 <TIM8_CC_HANDLER+0x4>

080004a6 <ADC3_HANDLER>:
}

 __attribute__ ((weak)) void ADC3_HANDLER(void)				
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
	while(1);
 80004aa:	e7fe      	b.n	80004aa <ADC3_HANDLER+0x4>

080004ac <FMC_HANDLER>:
}

 __attribute__ ((weak)) void FMC_HANDLER(void)				
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	while(1);
 80004b0:	e7fe      	b.n	80004b0 <FMC_HANDLER+0x4>

080004b2 <SPI3_HANDLER>:
}

 __attribute__ ((weak)) void SPI3_HANDLER(void)				
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
	while(1);
 80004b6:	e7fe      	b.n	80004b6 <SPI3_HANDLER+0x4>

080004b8 <UART4_HANDLER>:
}

 __attribute__ ((weak)) void UART4_HANDLER(void)			
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	while(1);
 80004bc:	e7fe      	b.n	80004bc <UART4_HANDLER+0x4>

080004be <UART5_HANDLER>:
}

 __attribute__ ((weak)) void UART5_HANDLER(void)			
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
	while(1);
 80004c2:	e7fe      	b.n	80004c2 <UART5_HANDLER+0x4>

080004c4 <TIM6_DAC_HANDLER>:
}

 __attribute__ ((weak)) void TIM6_DAC_HANDLER(void)			
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	while(1);
 80004c8:	e7fe      	b.n	80004c8 <TIM6_DAC_HANDLER+0x4>

080004ca <TIM7_HANDLER>:
}

 __attribute__ ((weak)) void TIM7_HANDLER(void)				
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
	while(1);
 80004ce:	e7fe      	b.n	80004ce <TIM7_HANDLER+0x4>

080004d0 <DMA2_CHANNEL1_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL1_HANDLER(void)	
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	while(1);
 80004d4:	e7fe      	b.n	80004d4 <DMA2_CHANNEL1_HANDLER+0x4>

080004d6 <DMA2_CHANNEL2_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL2_HANDLER(void)	
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
	while(1);
 80004da:	e7fe      	b.n	80004da <DMA2_CHANNEL2_HANDLER+0x4>

080004dc <DMA2_CHANNEL3_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL3_HANDLER(void)	
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	while(1);
 80004e0:	e7fe      	b.n	80004e0 <DMA2_CHANNEL3_HANDLER+0x4>

080004e2 <DMA2_CHANNEL4_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL4_HANDLER(void)	
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
	while(1);
 80004e6:	e7fe      	b.n	80004e6 <DMA2_CHANNEL4_HANDLER+0x4>

080004e8 <DMA2_CHANNEL5_HANDLER>:
}

 __attribute__ ((weak)) void DMA2_CHANNEL5_HANDLER(void)	
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	while(1);
 80004ec:	e7fe      	b.n	80004ec <DMA2_CHANNEL5_HANDLER+0x4>

080004ee <ADC4_HANDLER>:
}

 __attribute__ ((weak)) void ADC4_HANDLER(void)				
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
	while(1);
 80004f2:	e7fe      	b.n	80004f2 <ADC4_HANDLER+0x4>

080004f4 <COMP1_COMP2_COMP3_HANDLER>:
}

 __attribute__ ((weak)) void COMP1_COMP2_COMP3_HANDLER(void)		
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	while(1);
 80004f8:	e7fe      	b.n	80004f8 <COMP1_COMP2_COMP3_HANDLER+0x4>

080004fa <COMP4_COMP5_COMP6_HANDLER>:
}

 __attribute__ ((weak)) void COMP4_COMP5_COMP6_HANDLER(void)		
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
	while(1);
 80004fe:	e7fe      	b.n	80004fe <COMP4_COMP5_COMP6_HANDLER+0x4>

08000500 <COMP7_HANDLER>:
}

 __attribute__ ((weak)) void COMP7_HANDLER(void)			
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	while(1);
 8000504:	e7fe      	b.n	8000504 <COMP7_HANDLER+0x4>

08000506 <I2C3_EV_HANDLER>:
}

 __attribute__ ((weak)) void I2C3_EV_HANDLER(void)			
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
	while(1);
 800050a:	e7fe      	b.n	800050a <I2C3_EV_HANDLER+0x4>

0800050c <I2C3_ER_HANDLER>:
}

 __attribute__ ((weak)) void I2C3_ER_HANDLER(void)			
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	while(1);
 8000510:	e7fe      	b.n	8000510 <I2C3_ER_HANDLER+0x4>

08000512 <USB_HP_HANDLER>:
}

 __attribute__ ((weak)) void USB_HP_HANDLER(void)			
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
	while(1);
 8000516:	e7fe      	b.n	8000516 <USB_HP_HANDLER+0x4>

08000518 <USB_HL_HANDLER>:
}

 __attribute__ ((weak)) void USB_HL_HANDLER(void)			
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	while(1);
 800051c:	e7fe      	b.n	800051c <USB_HL_HANDLER+0x4>

0800051e <USB_WAKEUP_RMP_HANDLER>:
}

 __attribute__ ((weak)) void USB_WAKEUP_RMP_HANDLER(void)	
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
	while(1);
 8000522:	e7fe      	b.n	8000522 <USB_WAKEUP_RMP_HANDLER+0x4>

08000524 <TIM20_BRK_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_BRK_HANDLER(void)		
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	while(1);
 8000528:	e7fe      	b.n	8000528 <TIM20_BRK_HANDLER+0x4>

0800052a <TIM20_UP_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_UP_HANDLER(void)			
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
	while(1);
 800052e:	e7fe      	b.n	800052e <TIM20_UP_HANDLER+0x4>

08000530 <TIM20_TRG_COM_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_TRG_COM_HANDLER(void)	
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	while(1);
 8000534:	e7fe      	b.n	8000534 <TIM20_TRG_COM_HANDLER+0x4>

08000536 <TIM20_CC_HANDLER>:
}

 __attribute__ ((weak)) void TIM20_CC_HANDLER(void)			
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
	while(1);
 800053a:	e7fe      	b.n	800053a <TIM20_CC_HANDLER+0x4>

0800053c <FPU_HANDLER>:
}

 __attribute__ ((weak)) void FPU_HANDLER(void)				
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	while(1);
 8000540:	e7fe      	b.n	8000540 <FPU_HANDLER+0x4>

08000542 <SPI4_HANDLER>:
}

 __attribute__ ((weak)) void SPI4_HANDLER(void)				
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
	while(1);
 8000546:	e7fe      	b.n	8000546 <SPI4_HANDLER+0x4>

08000548 <_init>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop

0800054c <_fini>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
